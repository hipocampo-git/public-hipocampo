{
  objects: [
    {
      type: 'deck',
      name: 'Javascript',
      id: 1,
      description: '<span style="font-size:20px">Javascript interview questions</span>',
      synopsis: 'Javascript interview questions',
      notes: null,
      textToSpeech: 1,
      preface: 1,
      feedback: 0,
      showDontKnow: 1,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the expected output?\n<hiptts>What is the expected output? Please check the code on the screen</hiptts>\n\n<br />const array1 = [1, 2, 3];\n<br />array1.unshift(4, 5));\n<br />console.log(array1);',
      hint: null,
      explanation: '',
      notes: '',
      number: 1,
      answers: [
        {
          text: '[4,5,1,2,3]',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the expected output from the 2 console.log statements?\n<hiptts>What is the expected output from the 2 console.log statements? Check the code on the screen</hiptts>\n<br />\n<br />const array1 = [1, 2, 3];\n<br />const elem = array1.shift();\n<br />console.log(array1);\n<br />console.log(elem);\n',
      hint: null,
      explanation: 'Note that there is a difference between:\nconsole.log([1,2])\nand\nconsole.log([1,2].toString())\n\nthe first one will output\n[1,2]\nand the second one will output\n1,2\n\nFrom Gemini: console.log([1,2]) outputs the array as an array, while console.log([1,2].toString()) outputs the array as a string representation of the array.',
      notes: '',
      number: 2,
      answers: [
        {
          text: '[2,3]',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '1',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'Undefined is one of the 7 primitive data types, what are the other 6?',
      hint: null,
      explanation: '',
      notes: '#debug2',
      number: 3,
      answers: [
        {
          text: 'Number',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'String',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Null',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'bigint',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Symbol',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Boolean',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'There is only one non-primitive data type',
      hint: null,
      explanation: 'That data type is Object',
      notes: '',
      number: 4,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'It depends',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: true,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the 2 criteria to define a higher order function?',
      hint: null,
      explanation: '',
      notes: '',
      number: 5,
      answers: [
        {
          text: 'If they take another function as an argument',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'If the return a function',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'they take in a function as an input',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'they return a function',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'takes a function as a parameter',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'returns a function',
          number: 6,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Accept a function as input ',
          number: 7,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Return a function as output ',
          number: 8,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the difference between call() and apply()?',
      hint: null,
      explanation: "Note that the first argument to call or array is what will be assigned to 'this' inside the function ",
      notes: '',
      number: 6,
      answers: [
        {
          text: 'With call arguments are passed separately whereas with apply arguments are passed in an array',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Apply accepts an array of integers',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Call takes individual parameters whereas apply takes an array',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Is the following valid code?\n<speak>Is the following valid code? Check out the code on the screen</speak>\n<br />\n (bar is guaranteed to be an array)\n<br />return bar ? bar[0] : throw Error("this is an error")\n',
      hint: null,
      explanation: "Can't throw an error directly in a ternary\n\nError is \"SyntaxError: unexpected token 'thow'\"",
      notes: '',
      number: 7,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: "Provide code snippets for how to iterate over an array foo.\n\n(use 'elem' for the array element, use 'index' for any indicies)",
      hint: null,
      explanation: "It's dangerous to iterate over arrays with for / in\nA) The order is indeterminate\nB) The array object may have inherited/been assigned other properties",
      notes: '#coding',
      number: 8,
      answers: [
        {
          text: 'for (const elem of foo) {',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'for (let index = 0; index &lt; foo.length; index++) {',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'foo.forEach((elem, index) =&gt; {',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'fastFuzzy',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What does the following return?\nconst a = [1,2,3];\nconsole.log(typeof a);',
      hint: null,
      explanation: 'Array.isArray(a) can be used to determine an array.\nOr of course a third party library like lodash.',
      notes: '',
      number: 9,
      answers: [
        {
          text: 'object',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'what does the following return?\nconsole.log(typeof null);',
      hint: '',
      explanation: 'In JavaScript, `typeof null` does indeed return `"object"`, which is a long-standing bug in JavaScript for historical reasons. When JavaScript was first created, JavaScript values were thought of as a type tag and a value, with the type tag for objects being 0, and `null` being represented as the NULL pointer (i.e., all zeros). As a result, `null` had 0 as a type tag, hence the reason `typeof null` returns `"object"`.\n\nDespite this being recognized as a mistake and acknowledged by JavaScript\'s creator Brendan Eich, it was never corrected in subsequent versions of JavaScript for backward compatibility reasons.',
      notes: '',
      number: 10,
      answers: [
        {
          text: 'object',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the trick with this problem?\n\nGiven an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n',
      hint: null,
      explanation: '',
      notes: 'Since negative numbers can be in the initial array, those have to first be converted to arrayLength + 1 (positive) prior to tagging the other elements using negatives',
      number: 11,
      answers: [
        {
          text: 'mark the elemnts as negative in the existing array to indicate which numbers have occurred',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Use negative numbers to mark the indices of the numbers that have been covered ',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Use -1 on the values to mark the indices that match the numbers that have occurred',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'use +/- to track which elements have been checked so far',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'mark the numbers that have been visited using +/-',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'spacy',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'Two differences between Map and Object are the following:\n-Key Order: Map iterates in the order of insertion\n-Accidental Keys: a Map does not contain any keys by default. It only contains what is explicitly put into it.\n\nWhat are 6 other differences?',
      hint: null,
      explanation: 'Regarding this limitation: "Serialization and parsing: No native support for serialization or parsing."\nIt means that Maps by default don\'t have a toString() method and aren\'t support by JSON.stringify() or JSON.parse()',
      notes: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\nRegarding serialization and parsing of Maps:\n(But you can build your own serialization and parsing support for Map by using JSON.stringify() with its replacer argument, and by using JSON.parse() with its reviver argument. See the Stack Overflow question How do you JSON.stringify an ES6 Map?).',
      number: 13,
      answers: [
        {
          text: 'Security: A Map is safe to use with user-provided keys and values',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: ' A Map is safe to use with user-provided keys and values',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Map is safe with user defined values\n',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: "Key Types: A Map's keys can be any value (including functions, objects or any primitive).",
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'With maps, any data type can be used for the key',
          number: 5,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Size: The number of items in a Map is easily retrieved from its size property.',
          number: 6,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'you can get the size of Map',
          number: 7,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'With maps, can easily obtain size',
          number: 8,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Map has a size property ',
          number: 9,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Iteration: A Map is an iterable, so it can be directly iterated',
          number: 10,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Performance: Performs better in scenarios involving frequent additons and removals of key-value pairs',
          number: 11,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Map is more performant',
          number: 12,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Serialization and parsing: No native support for serialization or parsing.',
          number: 13,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following:\nconsole.log(parseInt("higeeks"));',
      hint: null,
      explanation: '',
      notes: '',
      number: 14,
      answers: [
        {
          text: 'NaN',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following?\nNaN === NaN',
      hint: null,
      explanation: 'The special value `NaN` stands for "Not a Number" and it is used to represent a value that does not represent a real number.\n\nAccording to the IEEE 754 floating-point standard, which JavaScript follows, `NaN` values are considered unique and therefore, `NaN` is not equal to anything, including itself. This is why `NaN !== NaN` returns `true`.\n\nThis behavior is a bit counter-intuitive, but it makes sense when you consider that `NaN` is used to represent the result of undefined or erroneous operations.\n\nIf you need to check if a value is `NaN`, you should use the `isNaN()` function:\n\n```javascript\nconsole.log(isNaN(NaN)); // true\n```\n\nOr, in modern JavaScript, you can use `Number.isNaN()` which is more reliable because it doesn\'t coerce the type:\n\n```javascript\nconsole.log(Number.isNaN(NaN)); // true',
      notes: '',
      number: 15,
      answers: [
        {
          text: 'false',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following?\n<br />console.log(Number.isNaN(BigInt(10)));\n<br />console.log(isNaN(BigInt(10)));\n<hiptts>What is the output of the following? (code is displayed below)</hiptts>',
      hint: null,
      explanation: 'isNaN() is more particular (and also the preferred method) as it treats BigInt as distinct from number.',
      notes: '',
      number: 16,
      answers: [
        {
          text: 'false',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'true',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the different ways to handle asynchronous logic in javascript?',
      hint: null,
      explanation: '',
      notes: '',
      number: 17,
      answers: [
        {
          text: 'callbacks',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Promises',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'async/await',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: '.then',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Async / await',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Promise',
          number: 6,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'await/async',
          number: 7,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Then handler',
          number: 8,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Async await',
          number: 9,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'A Set is like a Map where the key and the value are the same.',
      hint: null,
      explanation: "A Set can be thought of as a special kind of Map where the key and value are the same, and only unique keys/values are allowed. This is why when you iterate over a Set, each value is presented as a pair [value, value] - it's to make the interface similar to the Map object.\n",
      notes: '',
      number: 18,
      answers: [
        {
          text: 'true',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'false',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the 3 stages of event propagation?',
      hint: null,
      explanation: '',
      notes: '',
      number: 19,
      answers: [
        {
          text: 'Capturing',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Target',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Bubbling',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'capture',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'bubble',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Does array indexing work on strings?\nE.g. \nlet foo = "value";\nconsole.log(foo[0]);',
      hint: null,
      explanation: "Array indexing works but to use other array functions like shift() the string needs to be converted to an array.\n\nThe difference between charAt() and indexing is how they handle an index that is out of range. CharAt returns an empty string ('') whereas indexing returns undefined.",
      notes: '',
      number: 20,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are some methods for converting a string to an array?\n(use stringVal for the string variable in code examples)',
      hint: null,
      explanation: '',
      notes: 'https://www.geeksforgeeks.org/string-to-array-in-javascript/#array-from-method',
      number: 21,
      answers: [
        {
          text: "stringVal.split('')",
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'split method ',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '[...stringVal]',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'spread operatior',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'naive method',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'loop with stringVal.charAt()',
          number: 6,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Array.from(stringVal)',
          number: 7,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Array.from',
          number: 8,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Iterate and use charAt',
          number: 9,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Stringval.split',
          number: 10,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the exponent operator in javascript?',
      hint: null,
      explanation: '',
      notes: '',
      number: 22,
      answers: [
        {
          text: '**',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Is this syntax valid?\nconst low = -1 * BigInt(2**31);',
      hint: null,
      explanation: '-1 is treated as a number and BigInt cannot be mixed with other data types\nThe code will generate a TypeError exception\n\nThis works:\nconst low = BigInt(-1) * BigInt(2**31);',
      notes: '',
      number: 23,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the following operators: &amp; and ^\n<hiptts>What are the following operatiors: ampersand and carat</hiptts>',
      hint: null,
      explanation: '',
      notes: '',
      number: 24,
      answers: [
        {
          text: 'bitwise and',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'bitwise or',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the steps of the javascript event loop?',
      hint: null,
      explanation: '',
      notes: '',
      number: 25,
      answers: [
        {
          text: 'Execute a macrotask',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Execute all microtasks in the microtask queue',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'If the microtask queue is empty, update rendering',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Execute the next macrotask from the macrotask queue.',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Repeat',
          number: 5,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'execute an item in the macrotask queue',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Run a macrotask',
          number: 7,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Run all the micro tasks',
          number: 8,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Update the screen',
          number: 9,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Run a macrotask ',
          number: 10,
          isCorrect: 0,
          groupIndex: 4,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Do Timers (e.g., setTimeout, setInterval) get put on the MacroTask queue or the MicroTask queue?',
      hint: null,
      explanation: '',
      notes: '',
      number: 26,
      answers: [
        {
          text: 'MacroTask',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'MicroTask',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: "How does the following get executed?\n<hiptts>How does the following get executed? Please check the code on the screen</hiptts>\nPromise.resolve().then(() =&gt;\nconsole.log('foo'));\n",
      hint: null,
      explanation: '',
      notes: '',
      number: 27,
      answers: [
        {
          text: 'MacroTask queue',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'MicroTask queue',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'immediately',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the difference between Promise.resolve().then() and process.nextTick?',
      hint: null,
      explanation: 'Using Promise.resolve().then has no advantages over nextTick. It runs on the same queue, but has slightly higher priority, that is, promise handler can prevent next tick callback from ever running, the opposite is not possible. This behaviour is an implementation detail and should not be relied on.',
      notes: '#debug3',
      number: 28,
      answers: [
        {
          text: 'On node, they are essentially the same but there is a minor difference',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'They are exactly the same (other than process.nextTick only being available on node)',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'process.nextTick is a macroTask and Promise.resolve.then() is a microTask',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: true,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'asset',
      fileName: 'Screenshot on 2024-09-05 at 10-59-37.png',
      name: 'Screenshot on 2024-09-05 at 10-59-37.png',
      fileType: 'image/png',
      user_id: '&27',
      localFilePath: '',
      id: 8173,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: '<hipimg width="400%" src="/api/assets/8173" />\n<br />\n<a target="_blank" href="https://youtu.be/flzlEmyxMs8?si=2zdgZd7NFwp1SXVM&amp;t=153">Link to youtube video</a>',
      hint: null,
      explanation: '4,5 and 6 are executed immediately\n1 and 2 are put on the microtask queue\n3 is put on the macrotask queue\n\n<a href="https://www.youtube.com/watch?v=flzlEmyxMs8&amp;t=200">Link to YouTube video</a>\n',
      notes: 'Issues on ipad for this card:\n-need textarea resize buttons (even with keyboard/extended desktop attached)\n-in edit card the group tab display is hosed (need to confirm this on dekstop)\n-the hipplayer is not autoplaying \n#debug\n\nNeed to examine option 5 further - what happens when reject/resolve is introduced?\n\n<hipplayer type="youtube" src="https://www.youtube.com/watch?v=flzlEmyxMs8" begin="150" end="200" />\n\n#debug',
      number: 29,
      answers: [
        {
          text: '4',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '5',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: '6',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: '1',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: '2',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: '3',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the preferable way to access the prototype of an object?\n<speak>What is the preferable way to access the prototype of an object?</speak>\n<br />\n<br />A: dog1.__prototype__\n<br />B: Object.getPrototypeOf(dog1);\n\n',
      hint: null,
      explanation: 'Technically both still work but dog1.__prototype__ is deprecated',
      notes: '',
      number: 30,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg width="270" src="https://d.pr/i/R10mr5+" />\n\n\n',
      hint: null,
      explanation: '<a href="https://www.youtube.com/watch?v=flzlEmyxMs8&amp;t=900">Link to YouTube vide</a>',
      notes: '<hipplayer type="youtube" src="https://www.youtube.com/watch?v=flzlEmyxMs8" begin="900" end="930" />\n\n',
      number: 31,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'C',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'D',
          number: 4,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'E',
          number: 5,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: true,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'for of should be used with iterables (arrays)\nfor in should be used with objects',
      hint: null,
      explanation: "Couple of mnemonics:\n'o'f -&gt; NOT 'o'bjects, 'i'n -&gt; NOT 'i'terables\n\n\nfor..in..keys === foreign keys === use for...in for keys! As such, use for...of for values.",
      notes: '',
      number: 32,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg src="https://d.pr/i/F1WhSQ+" width="350" />\n\n<br />\n<a href="https://www.youtube.com/watch?v=flzlEmyxMs8&amp;t=1430" target="_blank">Link to video</a>',
      hint: '',
      explanation: 'function* is a generator function\n\n<hipplayer type="youtube" src="https://www.youtube.com/watch?v=flzlEmyxMs8" begin="1450" end="1460" auto-start="false" />',
      notes: '#debug <hipplayer type="youtube" src="https://www.youtube.com/watch?v=flzlEmyxMs8" begin="1450" end="1460" />\n#autoplay',
      number: 33,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'C',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'D',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'E',
          number: 5,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'How to create a generator function called foo?',
      hint: null,
      explanation: '',
      notes: 'Use the * character after the name to create a generator function',
      number: 34,
      answers: [
        {
          text: 'function* foo() {',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'asset',
      fileName: 'Screenshot on 2024-09-15 at 12-41-29.png',
      name: 'Screenshot on 2024-09-15 at 12-41-29.png',
      fileType: 'image/png',
      user_id: '&27',
      localFilePath: '',
      id: 8179,
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg width="270" src="/api/assets/8179" /> <br /> <a target="_blank" href="https://www.youtube.com/watch?v=SPaeA8shXFg&amp;t=305">Link to youtube video</a>',
      hint: null,
      explanation: '018 and 015 are in octal representation, however...8 is not valid in octal (only digits 0-7) so 018 is treated as decimal, hence we have 18-13 = 5',
      notes: '<hipplayer type="youtube" src="https://www.youtube.com/watch?v=SPaeA8shXFg" begin="80" end="90" />',
      number: 35,
      answers: [
        {
          text: 'NaN',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '3',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '5',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '13',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: true,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg src="https://d.pr/i/qrsv4X+" width="300" />\n<speak>What is the output of the following code? (check out the image on the screen)</speak>\n\n<br />\n<a href="https://www.youtube.com/watch?v=SPaeA8shXFg?t=194" target="_blank">Link to youtube video</a>\n',
      hint: null,
      explanation: 'It\'s nested typeof calls and the first typeof call returns a string ("number")',
      notes: 'Need to improve the image\n\n\n<hipplayer src="https://www.youtube.com/watch?v=SPaeA8shXFg" type="youtube" begin="196" end="210" />',
      number: 36,
      answers: [
        {
          text: 'string',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'number',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '1',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'true',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg src="https://d.pr/i/LXcFhs+" width="300" />\n<br />\n<a target="_blank" href="https://www.youtube.com/watch?v=SPaeA8shXFg&amp;t=225">Link to youtube video</a>\n',
      hint: null,
      explanation: 'Array.sort() coerces to string by default\nto sort numbers, add an explicit sort method\nArray.sort((a,b) =&gt; {\nreturn a &lt; b;\n}',
      notes: 'Covers array.sort\n<hipplayer type="youtube" src="https://www.youtube.com/watch?v=SPaeA8shXFg" begin="230" end="250" />',
      number: 37,
      answers: [
        {
          text: '33',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '2',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '8',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'what is the output of:\nconsole.log(0.1 + 0.2 == 0.3);',
      hint: null,
      explanation: 'It is because floating point arithmetic is imprecise (not just for javascript). \n0.1 + 0.2 = something like 0.300000000001\n\nThis effect occurs with other languages as well\n\nHere is a suggested way to compare floating point numbers:\nAs of ES2015, JavaScript provides a built-in constant `Number.EPSILON` that can be used as the "epsilon" value:\n\n```javascript\nfunction areEqual(num1, num2) {\nreturn Math.abs(num1 - num2) &lt; Number.EPSILON;\n}\n\nconsole.log(areEqual(0.1 + 0.2, 0.3)); // Outputs: true',
      notes: '',
      number: 41,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the output of:\nconsole.log(1 + "2" + "2");',
      hint: null,
      explanation: 'Numbers are always converted to strings when concatenating between strings and numbers.',
      notes: '<hipplayer src="https://www.youtube.com/watch?v=SPaeA8shXFg" type="youtube" begin="1000" end="1040" />',
      number: 43,
      answers: [
        {
          text: '122',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '32',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'NaN2',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'NaN',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: true,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: "What is the output of:\n<hiptts>What is the output of. Check the screen to see the code</hiptts>\n<br />const foo = 'Twitter';\n<br />console.log(String.raw`Hello${foo}\\nWorld`);\n\n<br />A: HelloTwitter\\nWorld\n<br />B: HelloTwitter\n<br />World\n<br />C: HelloTwitter World\n<br />D: Hello Twitter World\n<br />E: Hello${foo}\\nWorld\n<br />F: Hello${foo}\n<br />World",
      hint: null,
      explanation: 'String.raw`` will perform placeholder replacements but does not process escape sequences (it leaves them as is).',
      notes: '',
      number: 44,
      answers: [
        {
          text: '<span style="margin:0 10px">A</span>',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">B</span>',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">C</span>',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">D</span>',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">E</span>',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">F</span>',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the output of the following:\nconsole.log("This is a string" instanceof String);',
      hint: null,
      explanation: '"this is a string" is a primitive and instanceof is checking up the prototype chain to see if the String constructor is in the prototype chain\n\nThis would return true:\nnew String("this is a string") instanceof String \n\nIn fact, instanceof will return false when checking against any primitive datatype',
      notes: '<hipplayer type="youtube" src="https://www.youtube.com/watch?v=SPaeA8shXFg" begin="1447" end="1450" />',
      number: 45,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Pick the ones that are valid syntax:\n\nA) for (let elem of myArray) {\nB) for (const elem of myArray) {\nC) for (let i=0; i &lt; myArray.length; i++) {\nD) for (const i=0; i &lt; myArray.length; i++) {',
      hint: null,
      explanation: '',
      notes: '#debug4',
      number: 46,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'C',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'D',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: true,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg width="270" src="https://d.pr/i/1owDvo+" /> \n\nWill both functions return the same thing?',
      hint: null,
      explanation: 'For the second function, the interpreter will add a semicolor after the return statement, so it will return undefined.\n\n<a href="https://www.youtube.com/watch?v=zBaLx8g5qNw&amp;t=95" target="blank">Link to video</a>',
      notes: '',
      number: 47,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following? \n<hipimg width="270" src="https://d.pr/i/83ATNS+" />',
      hint: null,
      explanation: 'var declarations get hoisted, but not the initialization\n\n<a href="https://www.youtube.com/watch?v=zBaLx8g5qNw&amp;t=120" target="blank">Link to YouTube video</a>',
      notes: 'Move this question out to an "obsolete" deck (along with the double equal comparison questions)',
      number: 48,
      answers: [
        {
          text: 'undefined',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following?\n\n<hipimg width="270" src="https://d.pr/i/om402W+" />',
      hint: null,
      explanation: '<a href="https://www.youtube.com/watch?v=zBaLx8g5qNw&amp;t=160" target="blank">Link to YouTube video</a>\n\nTo output the sequence 0-4, change the var (which is function scope) to let (which is block scope)',
      notes: '',
      number: 49,
      answers: [
        {
          text: '5,5,5,5,5',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '5 5s',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Five 5s',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the different scope levels in javascript?',
      hint: null,
      explanation: '',
      notes: '',
      number: 50,
      answers: [
        {
          text: 'block',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'function',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'global',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the effects of "use-strict" ?',
      hint: null,
      explanation: '',
      notes: '',
      number: 51,
      answers: [
        {
          text: 'prevents accidental globals',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'eliminates this binding to the global this',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'disallows duplicate property names',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'limits eval',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'prohibits deleting undeletable properties',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'prohibits syntax that might be reserved in the future',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'future proofing',
          number: 7,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the issues with eval?',
      hint: null,
      explanation: '',
      notes: '',
      number: 52,
      answers: [
        {
          text: 'Potential to inject malicious code',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'more difficult to debug',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'not handled by debuggers',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Subject to code injection ',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Difficult to debug ',
          number: 5,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What will be logged to the console?\nconsole.log(1 &lt; 2 &lt; 3); \nconsole.log(3 &gt; 2 &gt; 1);',
      hint: null,
      explanation: '1)  1 &lt; 2 &lt; 3 is evaluated as (1 &lt; 2) &lt; 3, which becomes true &lt; 3. In JavaScript, true is treated as 1, so 1 &lt; 3 is true.\n2) 3 &gt; 2 &gt; 1 becomes (3 &gt; 2) &gt; 1, which results in true &gt; 1. Since true is 1, the comparison becomes 1 &gt; 1, which is false.',
      notes: '',
      number: 53,
      answers: [
        {
          text: 'true',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'false',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the use case for Promise.resolve(param) ?',
      hint: null,
      explanation: '<a href="https://stackoverflow.com/questions/38774011/what-is-the-use-case-of-promise-resolvepromise" target="_blank">Applicable thread on stack overflow</a>',
      notes: '',
      number: 54,
      answers: [
        {
          text: 'To handle a value that may or may not be a Promise',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'param may or may not be a promise',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'share',
      expiration: '2027-08-13T00:00:02.000Z',
      defaultIsAdminMode: 1,
      defaultIsRandomMode: 1,
      defaultIsTextToSpeechMode: 1,
      defaultIsSaveResponsesMode: 0,
      defaultIsPoolMultipleChoiceOptionsMode: 0,
      default_layout_id: 1,
    },
  ],
}
