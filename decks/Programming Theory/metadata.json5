{
  objects: [
    {
      type: 'deck',
      name: 'Programming Theory',
      id: 1,
      description: null,
      synopsis: null,
      notes: null,
      textToSpeech: 0,
      preface: 1,
      feedback: 0,
      showDontKnow: 1,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'What is the main difference between imperative and declarative programming?',
      hint: null,
      explanation: '',
      notes: '',
      number: 1,
      answers: [
        {
          text: 'Focuses on how to do something',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'Focuses on how to do something by listing explicit steps',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Focuses on what to do',
          number: 3,
          isCorrect: 1,
          groupIndex: 2,
        },
        {
          text: 'Focuses on what to do by describing the desired result without explicitly listing steps',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Programming Theory',
      question: 'HTML is a declarative language.',
      hint: null,
      explanation: '',
      notes: '',
      number: 2,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'Provide 3 examples of declarative languages.',
      hint: null,
      explanation: '',
      notes: '',
      number: 3,
      answers: [
        {
          text: 'SQL',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'Prolog',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'XSLT',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'HTML',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Haskell',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Datalog',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'SQL',
          number: 7,
          isCorrect: 1,
          groupIndex: 2,
        },
        {
          text: 'Prolog',
          number: 8,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'XSLT',
          number: 9,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'HTML',
          number: 10,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Haskell',
          number: 11,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Datalog',
          number: 12,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'SQL',
          number: 13,
          isCorrect: 1,
          groupIndex: 3,
        },
        {
          text: 'Prolog',
          number: 14,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'XSLT',
          number: 15,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'HTML',
          number: 16,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Haskell',
          number: 17,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Datalog',
          number: 18,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'What is the primary difference between syntax and semantics?\n',
      hint: null,
      explanation: '',
      notes: '',
      number: 4,
      answers: [
        {
          text: 'more concerned with structure and form',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'more concerned with structure',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'more concerned with the meaning and logic interpretation of the code.',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'more concerned with meaning.',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'What are 4 areas in programming where imperative and declarative programming differ?',
      hint: null,
      explanation: '',
      notes: 'https://codefresh.io/learn/infrastructure-as-code/declarative-vs-imperative-programming-4-key-differences/',
      number: 5,
      answers: [
        {
          text: 'Syntax and code structure',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Abstraction level',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'state management',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'control flow',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'At a high level describe, functional programming.',
      hint: null,
      explanation: '',
      notes: '',
      number: 6,
      answers: [
        {
          text: 'is a programming paradigm where programs are constructed by applying and composing functions',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'Javascript is a purely functional language (T/F).\nJavascript contains some aspects of functional programming (T/F).',
      hint: null,
      explanation: 'https://stackoverflow.com/questions/3962604/is-javascript-a-functional-programming-language',
      notes: '',
      number: 7,
      answers: [
        {
          text: 'F',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'false',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'T',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'True',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Programming Theory',
      question: 'Referential transparency and pure functions are synonymous. (T/F)',
      hint: null,
      explanation: '',
      notes: "Me:  referential transparency is related to the concept of pure functions?\nChatGpt: Yes, referential transparency is directly related to the concept of pure functions. A function is considered pure if it always produces the same output for the same set of inputs and does not cause any side effects. This is essentially the definition of referential transparency.\n\nIn other words, a function is referentially transparent if replacing a function call with its result does not change the program's behavior. This is possible only when the function is pure, i.e., it does not depend on or alter any external state.\n\nSo, referential transparency is a key characteristic of pure functions, and both concepts are fundamental to functional programming.",
      number: 8,
      answers: [
        {
          text: 'T',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'True',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
  ],
}
