{
  objects: [
    {
      type: 'deck',
      name: 'Python1',
      id: 1,
      description: '',
      synopsis: null,
      notes: '',
      textToSpeech: 0,
      preface: 1,
      feedback: 0,
      showDontKnow: 1,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'Is python a compiled laguage or an interpreted language?',
      hint: null,
      explanation: 'The compilation part is done first when we execute our code and this will generate byte code internally this byte code gets converted by the Python virtual machine(p.v.m) according to the underlying platform(machine+operating system).',
      notes: '',
      number: 1,
      answers: [
        {
          text: 'Python is a partially compiled language and partially interpreted language.',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What is list comprehension?',
      hint: null,
      explanation: "Here's an example:\nmy_list = [i for i in range(1, 10)]",
      notes: '',
      number: 2,
      answers: [
        {
          text: 'A syntactical construction to wase the create of a list',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What are the keywords for exception handling in python?',
      hint: null,
      explanation: '',
      notes: '',
      number: 3,
      answers: [
        {
          text: 'try',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'except',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'finally',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What are *args and **kwargs?',
      hint: null,
      explanation: 'Example with kwargs:\ntest_kwargs(name="John", age=25)\n\nExample with args:\ntest_args(1, \'two\', 3)\n',
      notes: '',
      number: 4,
      answers: [
        {
          text: '**kwargs uses key/value pairs',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What are the different levels of scope?',
      hint: null,
      explanation: '',
      notes: '',
      number: 5,
      answers: [
        {
          text: 'local',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'non-local',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'enclosing',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'global',
          number: 4,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'built-in',
          number: 5,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'outermost',
          number: 6,
          isCorrect: 0,
          groupIndex: 4,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'what does the range function do?',
      hint: null,
      explanation: 'Example of using the range() function:\n```python\nfor i in range(10):\nprint(i)\n```\n\nThis will print the numbers 0 through 9, one number at a time.\n\nNote that python 2 had range and xrange but xrange was removed and range switched to behave like xrange.',
      notes: '',
      number: 6,
      answers: [
        {
          text: 'creates a generator object that can be used to produce numbers from a specific range',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What are decorators?',
      hint: null,
      explanation: 'Example:\ndef my_decorator(func):\n    def wrapper():\n        print("Something is happening before the function is called.")\n        func()\n        print("Something is happening after the function is called.")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print("Hello!")\n\nsay_hello()',
      notes: '',
      number: 7,
      answers: [
        {
          text: 'allow for changing the behavior of a function with modifying the code of the function itself',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'some use cases for decorators are:\n1) Metrics collection: Decorate functions to gather performance or usage data.\n2) Concurrency control: Decorate functions to ensure thread safety or prevent race conditions.\n3) Data validation: Decorate functions to check the validity of input data and raise errors if necessary.\n\nCan you name 6 other use cases?',
      hint: null,
      explanation: 'Full list:\nError handling\nLogging and profiling\nCaching\nParameter validation\nAuthorization and Access Control\nDependency Injection\nFunction Modification\nCode Organization and Testing\nMetrics collection\nConcurrency Control\nData validation',
      notes: '',
      number: 8,
      answers: [
        {
          text: 'Error Handling',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Caching',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Authorization and Access Control',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Function Modification',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Metrics Collection',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Data Validation',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Error Handling',
          number: 7,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Caching',
          number: 8,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Authorization and Access Control',
          number: 9,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Function Modification',
          number: 10,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Metrics Collection',
          number: 11,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Data Validation',
          number: 12,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Error Handling',
          number: 13,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Caching',
          number: 14,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Authorization and Access Control',
          number: 15,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Function Modification',
          number: 16,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Metrics Collection',
          number: 17,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Data Validation',
          number: 18,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Logging and profiling',
          number: 19,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Parameter validation',
          number: 20,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Dependency Injection',
          number: 21,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Code Organization and Testing',
          number: 22,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Concurrency Control',
          number: 23,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Error Handling',
          number: 24,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Logging and profiling',
          number: 25,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Parameter validation',
          number: 26,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Dependency Injection',
          number: 27,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Code Organization and Testing',
          number: 28,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Concurrency Control',
          number: 29,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Logging and Profiling',
          number: 30,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Logging and profiling',
          number: 31,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Parameter validation',
          number: 32,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Dependency Injection',
          number: 33,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Code Organization and Testing',
          number: 34,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Concurrency Control',
          number: 35,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Caching',
          number: 36,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'How to print without a new line',
      hint: null,
      explanation: '',
      notes: '',
      number: 9,
      answers: [
        {
          text: 'using the end parameter key',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What are the built in data types in python',
      hint: null,
      explanation: '',
      notes: '',
      number: 10,
      answers: [
        {
          text: 'Text type',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'Mapping Type',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Set Types',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Binary Types',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'None Type',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Numeric Types',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Text type',
          number: 7,
          isCorrect: 1,
          groupIndex: 2,
        },
        {
          text: 'Mapping Type',
          number: 8,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Set Types',
          number: 9,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Binary Types',
          number: 10,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'None TYpe',
          number: 11,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Numeric Types',
          number: 12,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Text type',
          number: 13,
          isCorrect: 1,
          groupIndex: 3,
        },
        {
          text: 'Mapping Type',
          number: 14,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Boolean Type',
          number: 15,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Binary Types',
          number: 16,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Numeric Types',
          number: 17,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Sequence Types',
          number: 18,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Text type',
          number: 19,
          isCorrect: 1,
          groupIndex: 4,
        },
        {
          text: 'Mapping Type',
          number: 20,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Boolean Type',
          number: 21,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Binary Types',
          number: 22,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'None type',
          number: 23,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Sequence Types',
          number: 24,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Text type',
          number: 25,
          isCorrect: 1,
          groupIndex: 5,
        },
        {
          text: 'Set Types',
          number: 26,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Boolean Type',
          number: 27,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'None Type',
          number: 28,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Mapping Type',
          number: 29,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Sequence Types',
          number: 30,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Numeric Types',
          number: 31,
          isCorrect: 1,
          groupIndex: 6,
        },
        {
          text: 'Set Types',
          number: 32,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Boolean Type',
          number: 33,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'None Type',
          number: 34,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Binary Type',
          number: 35,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'Sequence Types',
          number: 36,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'Comparing lists vs arryays:\n_______ are built in python data structures whereas the other requires importing as a module.\n_______can only contain elements of a single data type whereas the other can contain elements of different data types.\n_______are more memory-efficient for large collections of numeric data whereas the other consumes more memory but offers more flexibility.\n_______are more verstile but may be slower for large numerical computations whereas arrays are generally faster for numerical operations.\n_______have more built-in methods and are more flexible whereas arrays have fewer methods but are optimized for arithmetic operations.\nTrue or False (both are Mutable)',
      hint: null,
      explanation: '',
      notes: '',
      number: 11,
      answers: [
        {
          text: 'Lists',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'Arrays',
          number: 2,
          isCorrect: 1,
          groupIndex: 2,
        },
        {
          text: 'Arrays',
          number: 3,
          isCorrect: 1,
          groupIndex: 3,
        },
        {
          text: 'Lists',
          number: 4,
          isCorrect: 1,
          groupIndex: 4,
        },
        {
          text: 'Lists',
          number: 5,
          isCorrect: 1,
          groupIndex: 5,
        },
        {
          text: 'True',
          number: 6,
          isCorrect: 1,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'What is the general rule for arrays vs lists?\nUse ______ when you need to perform numerical computations on large datasets and eifficiency is a priority.\nUse ______ when you need to store and manipulate data of different types and versatility is more important than performance.',
      hint: null,
      explanation: '',
      notes: '',
      number: 12,
      answers: [
        {
          text: 'Arrays',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Lists',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Python1',
      question: 'Tuples vs Lists\n___1___ are immutable whereas ___2___ can be mutated.\n__3__ can be resized; ___4___ are of fixed size.\nTherefore, ____5____  are faster.',
      hint: null,
      explanation: '',
      notes: '',
      number: 13,
      answers: [
        {
          text: 'Tuples',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Lists',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Lists ',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Tuples',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Tuples',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
  ],
}
