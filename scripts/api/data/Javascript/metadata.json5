{
  objects: [
    {
      type: 'deck',
      name: 'Javascript',
      id: 1,
      description: '<span style="font-size:20px">Javascript interview questions</span>',
      synopsis: 'Beginner / Intermediate Javascript interview questions',
      notes: null,
      textToSpeech: 1,
      preface: 1,
      feedback: 0,
      showDontKnow: 1,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the expected output?\n<hiptts>What is the expected output? Please check the code on the screen</hiptts>\n\n<br />const array1 = [1, 2, 3];\n<br />array1.unshift(4, 5));\n<br />console.log(array1);',
      hint: null,
      explanation: '',
      notes: '',
      number: 1,
      answers: [
        {
          text: '[4,5,1,2,3]',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the expected output from the 2 console.log statements?\n<hiptts>What is the expected output from the 2 console.log statements? Check the code on the screen</hiptts>\n<br />\n<br />const array1 = [1, 2, 3];\n<br />const elem = array1.shift();\n<br />console.log(array1);\n<br />console.log(elem);\n',
      hint: null,
      explanation: '',
      notes: '',
      number: 2,
      answers: [
        {
          text: '[2,3]',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '1',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'BigInt is one of the 7 primitive data types, what are the other 6?',
      hint: null,
      explanation: '',
      notes: '',
      number: 3,
      answers: [
        {
          text: 'Number',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'String',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Null',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Undefined',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Symbol',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Boolean',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'There is only one non-primitive data type',
      hint: null,
      explanation: '',
      notes: '',
      number: 4,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the 2 criteria to define a higher order function?',
      hint: null,
      explanation: '',
      notes: '',
      number: 5,
      answers: [
        {
          text: 'If they take another function as an argument',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'If the return a function',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'they take in a function as an input',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'they return a function',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'takes a function as a parameter',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'returns a function',
          number: 6,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the difference between call() and apply()?',
      hint: null,
      explanation: '',
      notes: '',
      number: 6,
      answers: [
        {
          text: 'With call arguments are passed separately whereas with apply arguments are passed in an array',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Apply accepts an array of integers',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Call takes individual parameters whereas apply takes an array',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Is the following valid code?\n<speak>Is the following valid code? Check out the code on the screen</speak>\n\n (bar is guaranteed to be an array)\n<br />return bar ? bar[0] : throw Error("this is an error")\n',
      hint: null,
      explanation: '',
      notes: '',
      number: 7,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: "Provide code snippets for how to iterate over an array foo.\n\n(use 'elem' for the array element, use 'index' for any indicies)",
      hint: null,
      explanation: '',
      notes: '',
      number: 8,
      answers: [
        {
          text: 'for (const elem of foo) {',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'for (let index = 0; index &lt; foo.length; index++) {',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'foo.forEach((elem, index) =&gt; {',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What does the following return?\nconst a = [1,2,3];\nconsole.log(typeof a);',
      hint: null,
      explanation: '',
      notes: '',
      number: 9,
      answers: [
        {
          text: 'object',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'what does the following return?\nconsole.log(typeof null);',
      hint: null,
      explanation: '',
      notes: '',
      number: 10,
      answers: [
        {
          text: 'object',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the trick with this problem?\n\nGiven an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n',
      hint: null,
      explanation: '',
      notes: '',
      number: 11,
      answers: [
        {
          text: 'mark the elemnts as negative in the existing array to indicate which numbers have occurred',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Use negative numbers to mark the indices of the numbers that have been covered ',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Use -1 on the values to mark the indices that match the numbers that have occurred',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'use +/- to track which elements have been checked so far',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'mark the numbers that have been visited using +/-',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'mark the visited numbers with a negative sign',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'spacy',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'Two differences between Map and Object are the following:\n-Key Order: Map iterates in the order of insertion\n-Accidental Keys: a Map does not contain any keys by default. It only contains what is explicitly put into it.\n\nWhat are 6 other differences?',
      hint: null,
      explanation: '',
      notes: '',
      number: 12,
      answers: [
        {
          text: 'Security: A Map is safe to use with user-provided keys and values',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: "Key Types: A Map's keys can be any value (including functions, objects or any primitive).",
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Size: The number of items in a Map is easily retrieved from its size property.',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Iteration: A Map is an iterable, so it can be directly iterated',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Performance: Performs better in scenarios involving frequent additons and removals of key-value pairs',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: 'Serialization and parsing: No native support for serialization or parsing.',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
        {
          text: 'you can get the size of Map',
          number: 7,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: ' A Map is safe to use with user-provided keys and values',
          number: 8,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'user defined values can be used with Map',
          number: 9,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'map keys can be different data types',
          number: 10,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following:\nconsole.log(parseInt("higeeks"));',
      hint: null,
      explanation: '',
      notes: '',
      number: 13,
      answers: [
        {
          text: 'NaN',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following?\nNaN === NaN',
      hint: null,
      explanation: '',
      notes: '',
      number: 14,
      answers: [
        {
          text: 'false',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the output of the following?\n<br />console.log(Number.isNaN(BigInt(10)));\n<br />console.log(isNaN(BigInt(10)));\n<hiptts>What is the output of the following? (code is displayed below)</hiptts>',
      hint: null,
      explanation: '',
      notes: '',
      number: 15,
      answers: [
        {
          text: 'false',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'true',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the different ways to handle asynchronous logic in javascript?',
      hint: null,
      explanation: '',
      notes: '',
      number: 16,
      answers: [
        {
          text: 'callbacks',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Promises',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'async/await',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: '.then',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Async / await',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Promise',
          number: 6,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'await/async',
          number: 7,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'A Set is like a Map where the key and the value are the same.',
      hint: null,
      explanation: '',
      notes: '',
      number: 17,
      answers: [
        {
          text: 'true',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'false',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the 3 stages of event propagation?',
      hint: null,
      explanation: '',
      notes: '',
      number: 18,
      answers: [
        {
          text: 'Capturing',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Target',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'Bubbling',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'capture',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'bubble',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Does array indexing work on strings?\nE.g. \nlet foo = "value";\nconsole.log(foo[0]);',
      hint: null,
      explanation: '',
      notes: '',
      number: 19,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are some methods for converting a string to an array?\n(use stringVal for the string variable in code examples)',
      hint: null,
      explanation: '',
      notes: '',
      number: 20,
      answers: [
        {
          text: "stringVal.split('')",
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'split method ',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '[...stringVal]',
          number: 3,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'spread operatior',
          number: 4,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'naive method',
          number: 5,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'loop with stringVal.charAt()',
          number: 6,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Array.from(stringVal)',
          number: 7,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Array.from',
          number: 8,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Iterate and use charAt',
          number: 9,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Stringval.split',
          number: 10,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.6,
        ignoreOrder: true,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What is the exponent operator in javascript?',
      hint: null,
      explanation: '',
      notes: '',
      number: 21,
      answers: [
        {
          text: '**',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Is this syntax valid?\nconst low = -1 * BigInt(2**31);',
      hint: null,
      explanation: '',
      notes: '',
      number: 22,
      answers: [
        {
          text: 'Yes',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'No',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the following operators: &amp; and ^\n<hiptts>What are the following operatiors: ampersand and carat</hiptts>',
      hint: null,
      explanation: '',
      notes: '',
      number: 23,
      answers: [
        {
          text: 'bitwise and',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'bitwise or',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'What are the steps of the javascript event loop?',
      hint: null,
      explanation: '',
      notes: '',
      number: 24,
      answers: [
        {
          text: 'Execute a macrotask',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'Execute all microtasks in the microtask queue',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: 'If the microtask queue is empty, update rendering',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: 'Execute the next macrotask from the macrotask queue.',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'Repeat',
          number: 5,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: 'execute an item in the macrotask queue',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'natural',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Do Timers (e.g., setTimeout, setInterval) get put on the MacroTask queue or the MicroTask queue?',
      hint: null,
      explanation: '',
      notes: '',
      number: 25,
      answers: [
        {
          text: 'MacroTask',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'MicroTask',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: "How does the following get executed?\n<hiptts>How does the following get executed? Please check the code on the screen</hiptts>\nPromise.resolve().then(() =&gt;\nconsole.log('foo'));\n",
      hint: null,
      explanation: '',
      notes: '',
      number: 26,
      answers: [
        {
          text: 'MacroTask queue',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'MicroTask queue',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'immediately',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the difference between Promise.resolve().then() and process.nextTick?',
      hint: null,
      explanation: '',
      notes: '',
      number: 27,
      answers: [
        {
          text: 'On node, they are essentially the same but there is a minor difference',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'They are exactly the same (other than process.nextTick only being available on node)',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'process.nextTick is a macroTask and Promise.resolve.then() is a microTask',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'asset',
      fileName: 'Screenshot on 2024-09-05 at 10-59-37.png',
      name: 'Screenshot on 2024-09-05 at 10-59-37.png',
      fileType: 'image/png',
      user_id: '&93387',
      localFilePath: '',
      id: 25614,
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: '<hipimg width="400%" src="/api/assets/25614" />\n<br />\n<a target="_blank" href="https://youtu.be/flzlEmyxMs8?si=2zdgZd7NFwp1SXVM&amp;t=153">Link to youtube video</a>',
      hint: null,
      explanation: '',
      notes: '',
      number: 28,
      answers: [
        {
          text: '4',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '5',
          number: 2,
          isCorrect: 0,
          groupIndex: 2,
        },
        {
          text: '6',
          number: 3,
          isCorrect: 0,
          groupIndex: 3,
        },
        {
          text: '1',
          number: 4,
          isCorrect: 0,
          groupIndex: 4,
        },
        {
          text: '2',
          number: 5,
          isCorrect: 0,
          groupIndex: 5,
        },
        {
          text: '3',
          number: 6,
          isCorrect: 0,
          groupIndex: 6,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the preferable way to access the prototype of an object?\n<speak>What is the preferable way to access the prototype of an object?</speak>\n<br />\n<br />A: dog1.__prototype__\n<br />B: Object.getPrototypeOf(dog1);\n\n',
      hint: null,
      explanation: '',
      notes: '',
      number: 29,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'Specify T/F for each one\n\n<hipplayer type="youtube" src="https://www.youtube.com/watch?v=flzlEmyxMs8" begin="860" end="865" />\n\n',
      hint: null,
      explanation: '',
      notes: '#update',
      number: 30,
      answers: [
        {
          text: 'A',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'B',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'C',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'D',
          number: 4,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'E',
          number: 5,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: true,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'for of should be used with iterables (arrays)\nfor in should be used with objects',
      hint: null,
      explanation: '',
      notes: '',
      number: 31,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: '<hipplayer src="https://www.youtube.com/watch?v=flzlEmyxMs8" type="youtube" begin="1430" end="1431" auto-start="true" />',
      hint: null,
      explanation: '',
      notes: '#fix',
      number: 32,
      answers: [
        {
          text: 'E',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 7,
      deck: 'Javascript',
      question: 'How to create a generator function called foo?',
      hint: null,
      explanation: '',
      notes: '',
      number: 33,
      answers: [
        {
          text: 'function* foo() {',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        pdType: 'stringMatch',
        threshold: 0.7,
        ignoreOrder: false,
        caseSensitive: false,
      },
      deckId: '_1',
    },
    {
      type: 'asset',
      fileName: 'Screenshot on 2024-09-15 at 12-41-29.png',
      name: 'Screenshot on 2024-09-15 at 12-41-29.png',
      fileType: 'image/png',
      user_id: '&93387',
      localFilePath: '',
      id: 25615,
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipimg width="400%" src="/api/assets/25615" /> <br /> <a target="_blank" href="https://www.youtube.com/watch?v=SPaeA8shXFg&amp;t=305">Link to youtube video</a>',
      hint: null,
      explanation: '',
      notes: '',
      number: 34,
      answers: [
        {
          text: 'NaN',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '3',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '5',
          number: 3,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '13',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipplayer src="https://www.youtube.com/watch?v=SPaeA8shXFg" type="youtube" begin="194" end="196" />',
      hint: null,
      explanation: '',
      notes: '',
      number: 35,
      answers: [
        {
          text: 'string',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: 'number',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '1',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'true',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: '<hipplayer type="youtube" src="https://www.youtube.com/watch?v=SPaeA8shXFg" begin="225" end="226" />',
      hint: null,
      explanation: '',
      notes: '#update',
      number: 36,
      answers: [
        {
          text: '33',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '2',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '8',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'what is the output of:\nconsole.log(0.1 + 0.2 == 0.3);',
      hint: null,
      explanation: '',
      notes: '',
      number: 37,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the output of:\nconsole.log(1 + "2" + "2");',
      hint: null,
      explanation: '',
      notes: '',
      number: 38,
      answers: [
        {
          text: '122',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '32',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'NaN2',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'NaN',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: "What is the output of:\n<hiptts>What is the output of. Check the screen to see the code</hiptts>\n<br />const foo = 'Twitter';\n<br />console.log(String.raw`Hello${foo}\\nWorld`);\n\n<br />A: HelloTwitter\\nWorld\n<br />B: HelloTwitter\n<br />World\n<br />C: HelloTwitter World\n<br />D: Hello Twitter World\n<br />E: Hello${foo}\\nWorld\n<br />F: Hello${foo}\n<br />World",
      hint: null,
      explanation: '',
      notes: '',
      number: 39,
      answers: [
        {
          text: '<span style="margin:0 10px">A</span>',
          number: 1,
          isCorrect: 1,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">B</span>',
          number: 2,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">C</span>',
          number: 3,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">D</span>',
          number: 4,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">E</span>',
          number: 5,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: '<span style="margin:0 10px">F</span>',
          number: 6,
          isCorrect: 0,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'card',
      algo: 5,
      deck: 'Javascript',
      question: 'What is the output of the following:\nconsole.log("This is a string" instanceof String);',
      hint: null,
      explanation: '',
      notes: '',
      number: 40,
      answers: [
        {
          text: 'True',
          number: 1,
          isCorrect: 0,
          groupIndex: 1,
        },
        {
          text: 'False',
          number: 2,
          isCorrect: 1,
          groupIndex: 1,
        },
      ],
      algoSettings: {
        randomize: false,
        confirmResponse: false,
      },
      deckId: '_1',
    },
    {
      type: 'share',
      expiration: '2027-10-09T00:04:03.000Z',
      defaultIsAdminMode: 1,
      defaultIsRandomMode: 1,
      defaultIsTextToSpeechMode: 0,
      defaultIsSaveResponsesMode: 0,
      defaultIsPoolMultipleChoiceOptionsMode: 0,
      default_layout_id: 1,
    },
  ],
}
